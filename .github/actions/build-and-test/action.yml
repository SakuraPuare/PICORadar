name: 'Build and Test with Caching'
description: 'Build project and run tests with build caching'
inputs:
  enable_coverage:
    description: 'Enable coverage reporting'
    required: false
    default: 'false'
  os:
    description: 'Operating system'
    required: true

runs:
  using: 'composite'
  steps:
    # 增量构建缓存
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build/**/*.o
          build/**/*.obj
          build/**/*.a
          build/**/*.lib
          build/**/*.so
          build/**/*.dll
          build/**/*.dylib
        key: build-artifacts-${{ inputs.os }}-${{ hashFiles('src/**/*.cpp', 'src/**/*.hpp', 'include/**/*.hpp') }}
        restore-keys: |
          build-artifacts-${{ inputs.os }}-

    - name: Configure CMake with caching (Linux)
      if: inputs.os == 'Linux'
      run: |
        cmake -G Ninja -B build -S . \
          -DCMAKE_BUILD_TYPE=Debug \
          ${{ inputs.enable_coverage == 'true' && '-DENABLE_COVERAGE=ON' || '' }} \
          -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      shell: bash

    - name: Configure CMake (Windows)
      if: inputs.os == 'Windows'
      run: |
        cmake -G Ninja -B build -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake
      shell: cmd

    - name: Build project
      run: cmake --build build --config Debug --parallel
      shell: ${{ inputs.os == 'Linux' && 'bash' || 'cmd' }}

    - name: Show ccache statistics (Linux)
      if: inputs.os == 'Linux'
      run: ccache --show-stats
      shell: bash

    # 缓存测试数据
    - name: Cache test data
      uses: actions/cache@v4
      with:
        path: |
          test/data
          test/fixtures
        key: test-data-${{ hashFiles('test/data/**/*', 'test/fixtures/**/*') }}

    - name: Run tests
      working-directory: ./build
      run: ctest -C Debug --output-on-failure --parallel 4
      shell: ${{ inputs.os == 'Linux' && 'bash' || 'cmd' }}

    - name: Generate coverage report with gcovr
      if: inputs.enable_coverage == 'true' && inputs.os == 'Linux'
      working-directory: ./build
      run: |
        # 使用 gcovr 生成覆盖率报告
        gcovr . \
          --root .. \
          --exclude '../test/.*' \
          --exclude '../vcpkg_installed/.*' \
          --exclude '/usr/.*' \
          --exclude '.*\.pb\.cc' \
          --exclude '.*\.pb\.h' \
          --exclude '../build/_deps/.*' \
          --html-details coverage_report/index.html \
          --html-title "PICORadar Coverage Report" \
          --xml coverage.xml \
          --json coverage.json \
          --print-summary
      shell: bash